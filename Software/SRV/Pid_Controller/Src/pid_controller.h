#ifndef _APP_CONTROLLER_H_
#define _APP_CONTROLLER_H_

/***********************************************************************************************************
 ********************************************* Included files **********************************************
 ***********************************************************************************************************/

/***********************************************************************************************************
 ************************************************* Defines *************************************************
 ***********************************************************************************************************/

#include <stdint.h>

/***********************************************************************************************************
 *********************************************** Data types ************************************************
 ***********************************************************************************************************/

typedef struct 
{
	float previous_error;
	float total_error;
	float Kp;
	float Ki;
	float Kd;
	float anti_windup_limit;
}Pid_Controller_Data_t;

/***********************************************************************************************************
 ********************************************* Exported objects ********************************************
 ***********************************************************************************************************/

/***********************************************************************************************************
 ************************************** Exported function prototypes ***************************************
 ***********************************************************************************************************/

void Pid_Controller_Init(Pid_Controller_Data_t* pid, float kp_init, float ki_init, float kd_init, float anti_windup_limit_init);
void Pid_Controller_Reset(Pid_Controller_Data_t* pid);
float Pid_Controller_Calculate(Pid_Controller_Data_t* pid, float setpoint, float current_value);

#endif  /* _APP_CONTROLLER_H_ */
